# Generated by kameo-snake-handler codegen. Do not edit.
# package: callback_request_types
from __future__ import annotations
from dataclasses import dataclass
from typing import Optional, Union, Literal, List, Dict, Any, Callable, TypeVar, TypedDict, Unpack
try:
    from typing import TypeGuard  # Python 3.10+
except ImportError:
    from typing_extensions import TypeGuard  # fallback

class TestCallbackMessage: ...
class TraderCallbackMessage: ...

@dataclass
class TestCallbackMessage:
    value: int
def make_test_callback_message(value) -> TestCallbackMessage:
    return TestCallbackMessage(value=value)
def from_wire_test_callback_message(d: Dict[str, Any]) -> TestCallbackMessage:
    if not isinstance(d, dict):
        raise ValueError("Invalid TestCallbackMessage wire shape: expected dict")
    return TestCallbackMessage(value=d.get("value"))
def to_wire_test_callback_message(m: TestCallbackMessage) -> Dict[str, Any]:
    return {"value": m.value}
def from_wire_test_callback_message_strict(d: Dict[str, Any]) -> TestCallbackMessage:
    if not isinstance(d, dict):
        raise ValueError("Invalid TestCallbackMessage wire shape: expected dict")
    allowed = {"value"}
    unknown = set(d.keys()) - allowed
    if unknown:
        raise ValueError("Unknown keys for TestCallbackMessage: " + repr(unknown))
    return from_wire_test_callback_message(d)

@dataclass
class TraderCallbackMessage:
    value: int
def make_trader_callback_message(value) -> TraderCallbackMessage:
    return TraderCallbackMessage(value=value)
def from_wire_trader_callback_message(d: Dict[str, Any]) -> TraderCallbackMessage:
    if not isinstance(d, dict):
        raise ValueError("Invalid TraderCallbackMessage wire shape: expected dict")
    return TraderCallbackMessage(value=d.get("value"))
def to_wire_trader_callback_message(m: TraderCallbackMessage) -> Dict[str, Any]:
    return {"value": m.value}
def from_wire_trader_callback_message_strict(d: Dict[str, Any]) -> TraderCallbackMessage:
    if not isinstance(d, dict):
        raise ValueError("Invalid TraderCallbackMessage wire shape: expected dict")
    allowed = {"value"}
    unknown = set(d.keys()) - allowed
    if unknown:
        raise ValueError("Unknown keys for TraderCallbackMessage: " + repr(unknown))
    return from_wire_trader_callback_message(d)

