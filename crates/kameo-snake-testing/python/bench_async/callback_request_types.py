# Generated by kameo-snake-handler codegen. Do not edit.
# package: callback_request_types
from __future__ import annotations
from dataclasses import dataclass
from typing import Optional, Union, Literal, List, Dict, Any, Callable, TypeVar, TypedDict, Unpack
try:
    from typing import TypeGuard  # Python 3.10+
except ImportError:
    from typing_extensions import TypeGuard  # fallback

class BenchCallback: ...

@dataclass
class BenchCallback:
    id: int
    rust_sleep_ms: int
def make_bench_callback(id, rust_sleep_ms) -> BenchCallback:
    return BenchCallback(id=id, rust_sleep_ms=rust_sleep_ms)
def from_wire_bench_callback(d: Dict[str, Any]) -> BenchCallback:
    if not isinstance(d, dict):
        raise ValueError("Invalid BenchCallback wire shape: expected dict")
    return BenchCallback(id=d.get("id"), rust_sleep_ms=d.get("rust_sleep_ms"))
def to_wire_bench_callback(m: BenchCallback) -> Dict[str, Any]:
    return {"id": m.id, "rust_sleep_ms": m.rust_sleep_ms}
def from_wire_bench_callback_strict(d: Dict[str, Any]) -> BenchCallback:
    if not isinstance(d, dict):
        raise ValueError("Invalid BenchCallback wire shape: expected dict")
    allowed = {"id", "rust_sleep_ms"}
    unknown = set(d.keys()) - allowed
    if unknown:
        raise ValueError("Unknown keys for BenchCallback: " + repr(unknown))
    return from_wire_bench_callback(d)

